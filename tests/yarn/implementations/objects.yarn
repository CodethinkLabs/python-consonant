Fetch objects and check the results
===================================

Fetch objects from a store
--------------------------

    IMPLEMENTS WHEN fetching objects from commit ([abcdef0-9]{8})

    run_consonant_store <<-EOF
    commit = store.commit("$MATCH_1")
    print yaml.dump(store.objects(commit))
    EOF

    run_consonant_web_service <<-EOF
    print http_get_json_or_yaml("/commits/$MATCH_1/objects")
    EOF

    fail_unknown_api

    IMPLEMENTS WHEN fetching objects from the non-existent commit ([abcdef0-9]{8})

    run_consonant_store <<-EOF || true
    commit = store.commit("$MATCH_1")
    print yaml.dump(store.objects(commit))
    EOF

    run_consonant_web_service <<-EOF || true
    print http_get_json_or_yaml("/commits/$MATCH_1/objects")
    EOF

    fail_unknown_api

    IMPLEMENTS WHEN fetching objects from the latest commit

    run_consonant_store <<-EOF
    ref = store.ref('refs/heads/master')
    print yaml.dump(store.objects(ref.head))
    EOF

    run_consonant_web_service <<-EOF
    print http_get_json_or_yaml("/objects")
    EOF

    fail_unknown_api

    IMPLEMENTS WHEN fetching objects from the latest commit in "(.+)"

    run_consonant_store <<-EOF
    import itertools

    ref = store.ref("$MATCH_1")
    objects = store.objects(ref.head)
    print yaml.dump(objects, default_flow_style=False)
    print '---'
    raw = {}
    for class_objects in itertools.chain(objects.itervalues()):
        for object in class_objects:
            raw[object.uuid] = {}
            for property in object.properties.itervalues():
                if isinstance(
                        property, consonant.store.properties.RawProperty):
                    prop_data = store.raw_property_data(
                        ref.head, object, property.name)
                    raw[object.uuid][property.name] = prop_data
    print yaml.dump(raw, default_flow_style=False)
    EOF

    run_consonant_web_service <<-EOF
    objects = yaml.load(http_get_json_or_yaml("/refs/$MATCH_1/objects"))
        print objects
        print '---'
        schema = yaml.load(http_get_json_or_yaml("/refs/$MATCH_1/schema"))
        raw = {}
        for klass, klass_objects in objects.iteritems():
            for object in klass_objects:
                raw[object['uuid']] = {}
                for prop_name, value in object['properties'].iteritems():
                    prop_def = schema['classes'][klass]['properties'][prop_name]
                    if prop_def['type'] == 'raw':
                        prop_data = http_get(
                            '/refs/$MATCH_1/objects/%s/properties/%s' % \
                                (object['uuid'], prop_name))
                        raw[object['uuid']][prop_name] = prop_data
        print yaml.dump(raw, default_flow_style=False)
    EOF

    fail_unknown_api

Verify that the result contains objects of a given number of classes
--------------------------------------------------------------------

    IMPLEMENTS THEN the result contains objects of exactly ([0-9]+) classes

    run_python_test <<-EOF
    assert len(output_yaml) == 2
    assert isinstance(output_yaml, dict)
    EOF

Verify that the result contains a given number of objects of a certain class
----------------------------------------------------------------------------

    IMPLEMENTS THEN the result contains exactly ([0-9]+) objects of class "(.+)"

    run_python_test <<-EOF
    assert "$MATCH_2" in output_yaml
    assert len(output_yaml["$MATCH_2"]) == $MATCH_1
    EOF

Verify that the objects of a given class include a certain object
-----------------------------------------------------------------

    IMPLEMENTS THEN the objects of class "(.+)" include "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])"

    run_python_test <<-EOF
    objects = output_yaml["$MATCH_1"]
    assert len([x for x in objects if x['uuid'] == "$MATCH_2"]) == 1
    EOF

Verify that the objects of a given class do not include a certain object
------------------------------------------------------------------------

    IMPLEMENTS THEN the objects of class "(.+)" do not include "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])"

    run_python_test <<-EOF
    objects = output_yaml["$MATCH_1"]
    assert len([x for x in objects if x['uuid'] == "$MATCH_2"]) == 0
    EOF

Verify that a given object has a certain number of properties set
-----------------------------------------------------------------

    IMPLEMENTS THEN the object "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" has exactly ([0-9]+) properties set

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_1"][0]
    assert 'properties' in object
    assert len(object['properties']) == $MATCH_2
    EOF

    IMPLEMENTS THEN the newly created object has exactly ([0-9]+) propert(y|ies) set

    NEW_OBJECTS=$(created_objects master)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert 'properties' in object
    print object['properties']
    assert len(object['properties']) == $MATCH_1
    EOF

    IMPLEMENTS THEN the newly created object in "(.+)" has exactly ([0-9]+) propert(y|ies) set

    NEW_OBJECTS=$(created_objects $MATCH_1)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert 'properties' in object
    print object['properties']
    assert len(object['properties']) == $MATCH_2
    EOF

Verify that a given property of an object is set to a certain value
-------------------------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" is set to (.+)

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_2"][0]
    assert "$MATCH_1" in object['properties']
    assert object['properties']["$MATCH_1"] == eval('$MATCH_3')
    EOF

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of the newly created object is set to (.+)

    NEW_OBJECTS=$(created_objects master)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert "$MATCH_1" in object['properties']
    assert object['properties']["$MATCH_1"] == eval('$MATCH_2')
    EOF

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of the newly created object in "(.+)" is set to (.+)

    NEW_OBJECTS=$(created_objects $MATCH_2)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert "$MATCH_1" in object['properties']
    assert object['properties']["$MATCH_1"] == eval('$MATCH_3')
    EOF

    IMPLEMENTS THEN the data of the raw property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of the newly created object in "(.+)" is set to (.+)

    NEW_OBJECTS=$(created_objects $MATCH_2)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert "$MATCH_1" in object['properties']

    assert output_raw_properties is not None
    assert new_object in output_raw_properties
    assert "$MATCH_1" in output_raw_properties[new_object]
    assert output_raw_properties[new_object]["$MATCH_1"] == '$MATCH_3'
    EOF

Verify that a given property of an object is not set
----------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of the newly created object is not set

    NEW_OBJECTS=$(created_objects master)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert not "$MATCH_1" in object['properties']
    EOF

Verify that a given property of an object has a certain number of elements
--------------------------------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" contains exactly ([0-9]+) elements?

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_2"][0]
    assert "$MATCH_1" in object['properties']
    assert len(object['properties']["$MATCH_1"]) == $MATCH_3
    EOF

Verify that a given property of an object includes a certain value
------------------------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" includes the value (.+)

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_2"][0]
    assert "$MATCH_1" in object['properties']
    assert $MATCH_3 in object['properties']["$MATCH_1"]
    EOF

Verify that a given property of an object includes a reference to a certain object
----------------------------------------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" includes the object "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])"

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_2"][0]
    assert "$MATCH_1" in object['properties']
    assert {'uuid': "$MATCH_3"} in object['properties']["$MATCH_1"]
    EOF

Verify that a given property of an object references a certain object
---------------------------------------------------------------------

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])" references "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])"

    run_python_test <<-EOF
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == "$MATCH_2"][0]
    assert "$MATCH_1" in object['properties']
    assert {'uuid': "$MATCH_3"} == object['properties']["$MATCH_1"]
    EOF

    IMPLEMENTS THEN the property "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" of the newly created object references "([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])"

    NEW_OBJECTS=$(created_objects master)
    run_python_test <<-EOF
    new_object = eval("$NEW_OBJECTS")[0]
    if isinstance(output_yaml, dict):
      objects = []; [objects.extend(x) for x in output_yaml.itervalues()]
    else:
      objects = output_yaml
    object = [x for x in objects if x['uuid'] == new_object][0]
    assert "$MATCH_1" in object['properties']
    assert {'uuid': "$MATCH_2"} == object['properties']["$MATCH_1"]
    EOF

