Scenario test implementation
============================

Implementation section for making stores available
--------------------------------------------------

    IMPLEMENTS GIVEN a local simple kanban store
    cd $DATADIR
    clone_test_schemas
    clone_test_store consonant-test-store-01

Implementation section for using consonant.store
------------------------------------------------

Fetch a list of all Git refs from a local store.

    IMPLEMENTS WHEN listing Git refs using consonant.store
    python /dev/stdin > $DATADIR/stdout 2> $DATADIR/stderr <<-EOF || true
    import consonant
    import os
    import yaml
    
    pool = consonant.store.pools.StorePool()
    store = pool.store(os.path.join('$DATADIR', 'consonant-test-store-01'))
    refs = store.refs()
    print yaml.dump(refs, default_flow_style=False)
    EOF

Fetch a single ref from a local store.

    IMPLEMENTS WHEN fetching the ref "([a-zA-Z0-9:\-_/]+)" using consonant.store
    python /dev/stdin > $DATADIR/stdout 2> $DATADIR/stderr <<-EOF || true
    import consonant
    import os
    import yaml

    pool = consonant.store.pools.StorePool()
    store = pool.store(os.path.join('$DATADIR', 'consonant-test-store-01'))
    ref = store.ref('$MATCH_1')
    print yaml.dump(ref, default_flow_style=False)
    EOF

Fetch a single commit from a local store.

    IMPLEMENTS WHEN fetching the commit ([abcdefABCDEF0-9]+) using consonant.store
    python /dev/stdin > $DATADIR/stdout 2> $DATADIR/stderr <<-EOF || true
    import consonant
    import os
    import yaml

    pool = consonant.store.pools.StorePool()
    store = pool.store(os.path.join('$DATADIR', 'consonant-test-store-01'))
    commit = store.commit('$MATCH_1')
    print yaml.dump(commit, default_flow_style=False)
    EOF

Obtain the store name from a commit in a local store.

    IMPLEMENTS WHEN obtaining the store name from commit ([abcdefABCDEF0-9]+) using consonant.store
    python /dev/stdin > $DATADIR/stdout 2> $DATADIR/stderr <<-EOF || true
    import consonant
    import os

    pool = consonant.store.pools.StorePool()
    store = pool.store(os.path.join('$DATADIR', 'consonant-test-store-01'))
    commit = store.commit('$MATCH_1')
    print store.name(commit)
    EOF

Obtain the schema from a commit in a local store.

    IMPLEMENTS WHEN obtaining the service aliases from commit ([abcdefABCDEF0-9]+) using consonant.store
    python /dev/stdin > $DATADIR/stdout 2> $DATADIR/stderr <<-EOF || true
    import consonant
    import os

    pool = consonant.store.pools.StorePool()
    store = pool.store(os.path.join('$DATADIR', 'consonant-test-store-01'))
    commit = store.commit('$MATCH_1')
    print store.services(commit)
    EOF

Obtain the service aliases from a commit in a local store.

Implementation section for checking the output of commands
----------------------------------------------------------

Check whether a specific local/remote branch or a tag is included in a
list of refs.

    IMPLEMENTS THEN the refs include a (local|remote) branch called "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        if '$MATCH_1' == 'local':
            if '$MATCH_2' == 'HEAD':
                assert 'HEAD' in data
            else:
                assert 'refs/heads/$MATCH_2' in data
        else:
            assert 'refs/remotes/%s' % '$MATCH_2' in data
    EOF

    IMPLEMENTS THEN the refs include a tag called "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert 'refs/tags/$MATCH_1' in data
    EOF

Check whether a specific local/remote branch or a tag has a given URL
alias:

    IMPLEMENTS THEN the (local|remote) branch "(.+)" has an alias "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        if '$MATCH_1' == 'local':
            if '$MATCH_2' == 'HEAD':
                assert '$MATCH_3' in data['HEAD']['url-aliases']
            else:
                assert '$MATCH_3' in data['refs/heads/$MATCH_2']['url-aliases']
        else:
            assert '$MATCH_3' in data['refs/remotes/$MATCH_2']['url-aliases']
    EOF

    IMPLEMENTS THEN the tag "(.+)" has an alias "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert '$MATCH_2' in data['refs/tags/$MATCH_1']['url-aliases']
    EOF

Check whether a field in the output dictionary is set to a specific
value.

    IMPLEMENTS THEN the field "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" is set to (.+)
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert data['$MATCH_1'] == eval('$MATCH_2')
    EOF

    IMPLEMENTS THEN the field "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" > "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" is set to (.+)
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert data['$MATCH_1']['$MATCH_2'] == eval('$MATCH_3')
    EOF

Check whether a given exception is thrown.

    IMPLEMENTS THEN a (.+) is thrown
    cat $DATADIR/stderr
    grep "^[a-zA-Z0-9_\.]*$MATCH_1" $DATADIR/stderr

Check whether the store name is set to a given value.

    IMPLEMENTS THEN the store name is "(.+)"
    cat $DATADIR/stdout
    test "$(cat $DATADIR/stdout)" = "$MATCH_1"

Check whether a mapping of service aliases includes a given alias.

    IMPLEMENTS THEN the service aliases include "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert '$MATCH_1' in data
    EOF

Check whether a mapping of service aliases does not include a given
alias.

    IMPLEMENTS THEN the service aliases do not include "(.+)"
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert '$MATCH_1' not in data
    EOF

Check whether the YAML ouput is an empty mapping.

    IMPLEMENTS THEN the result is an empty mapping
    python /dev/stdin <<-EOF
    import os
    import yaml

    with open(os.path.join('$DATADIR', 'stdout')) as f:
        data = yaml.load(f)
        assert isinstance(data, dict)
        assert len(data) == 0
    EOF
