Scenario test implementation
============================

Implementation section for making stores available
--------------------------------------------------

    IMPLEMENTS GIVEN a local standard test store "([a-zA-Z0-9-]+)"
    clone_test_schemas
    clone_test_store "$MATCH_1"

Implementation section for using consonant.store
------------------------------------------------

Fetch a list of all Git refs from a local store.

    IMPLEMENTS WHEN listing Git refs using consonant.store
    run_python_with_store <<-EOF
    print yaml.dump(store.refs())
    EOF

Fetch a single ref from a local store.

    IMPLEMENTS WHEN fetching the ref "([a-zA-Z0-9:\-_/]+)" using consonant.store
    run_python_with_store <<-EOF
    print yaml.dump(store.ref('$MATCH_1'))
    EOF

    IMPLEMENTS WHEN fetching the non-existent ref "([a-zA-Z0-9:\-_/]+)" using consonant.store
    run_python_with_store <<-EOF || true
    print yaml.dump(store.ref('$MATCH_1'))
    EOF

Fetch a single commit from a local store.

    IMPLEMENTS WHEN fetching the commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF
    print yaml.dump(store.commit('$MATCH_1'))
    EOF

    IMPLEMENTS WHEN fetching the non-existent commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF || true
    print yaml.dump(store.commit('$MATCH_1'))
    EOF

Obtain the store name from a commit in a local store.

    IMPLEMENTS WHEN obtaining the store name from commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF
    print store.name(store.commit('$MATCH_1'))
    EOF

    IMPLEMENTS WHEN obtaining the store name from the non-existent commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF || true
    print store.name(store.commit('$MATCH_1'))
    EOF

Obtain service aliases from a commit in a local store.

    IMPLEMENTS WHEN obtaining service aliases from commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF
    print store.services(store.commit('$MATCH_1'))
    EOF

    IMPLEMENTS WHEN obtaining service aliases from the non-existent commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF || true
    print store.services(store.commit('$MATCH_1'))
    EOF

Obtain the schema name from a commit in a local store.

    IMPLEMENTS WHEN obtaining the schema name from commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF
    print store.schema(store.commit('$MATCH_1'))
    EOF

    IMPLEMENTS WHEN obtaining the schema name from the non-existent commit ([abcdefABCDEF0-9]+) using consonant.store
    run_python_with_store <<-EOF || true
    print store.schema(store.commit('$MATCH_1'))
    EOF

Implementation section for checking the output of commands
----------------------------------------------------------

Check whether a specific local/remote branch or a tag is included in a
list of refs.

    IMPLEMENTS THEN the refs include a (local|remote) branch called "(.+)"
    run_python_test <<-EOF
    if '$MATCH_1' == 'local':
        if '$MATCH_2' == 'HEAD':
            assert 'HEAD' in output_yaml
        else:
            assert 'refs/heads/$MATCH_2' in output_yaml
    else:
        assert 'refs/remotes/%s' % '$MATCH_2' in output_yaml
    EOF

    IMPLEMENTS THEN the refs include a tag called "(.+)"
    run_python_test <<-EOF
    'refs/tags/$MATCH_1' in output_yaml
    EOF

Check whether a specific local/remote branch or a tag has a given URL
alias:

    IMPLEMENTS THEN the (local|remote) branch "(.+)" has an alias "(.+)"
    run_python_test <<-EOF
    if '$MATCH_1' == 'local':
        if '$MATCH_2' == 'HEAD':
            assert '$MATCH_3' in output_yaml['HEAD']['url-aliases']
        else:
            assert '$MATCH_3' in \
                output_yaml['refs/heads/$MATCH_2']['url-aliases']
    else:
        assert '$MATCH_3' in \
            output_yaml['refs/remotes/$MATCH_2']['url-aliases']
    EOF

    IMPLEMENTS THEN the tag "(.+)" has an alias "(.+)"
    run_python_test <<-EOF
    assert '$MATCH_2' in output_yaml['refs/tags/$MATCH_1']['url-aliases']
    EOF

Check whether a field in the output dictionary is set to a specific
value.

    IMPLEMENTS THEN the field "(.+)" does not exist
    run_python_test <<-EOF
    assert '$MATCH_1' not in output_yaml
    EOF

    IMPLEMENTS THEN the field "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" is set to (.+)
    run_python_test <<-EOF
    assert output_yaml['$MATCH_1'] == eval('$MATCH_2')
    EOF

    IMPLEMENTS THEN the field "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" > "([a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9])" is set to (.+)
    run_python_test <<-EOF
    assert output_yaml['$MATCH_1']['$MATCH_2'] == eval('$MATCH_3')
    EOF

Check whether a given exception is thrown.

    IMPLEMENTS THEN a (.+) is thrown
    test_for_exception "$MATCH_1"

Check whether the result is set to a given value.

    IMPLEMENTS THEN the result is "(.+)"
    test "$(cat $DATADIR/stdout | xargs echo -n)" = "$MATCH_1"

Check whether the result is an empty mapping.

    IMPLEMENTS THEN the result is an empty mapping
    run_python_test <<-EOF
    assert output_yaml == {}
    EOF

Check whether a mapping of service aliases includes a given alias.

    IMPLEMENTS THEN the service aliases include "(.+)"
    run_python_test <<-EOF
    assert '$MATCH_1' in output_yaml
    EOF

Check whether a mapping of service aliases does not include a given
alias.

    IMPLEMENTS THEN the service aliases do not include "(.+)"
    run_python_test <<-EOF
    assert '$MATCH_1' not in output_yaml
    EOF
